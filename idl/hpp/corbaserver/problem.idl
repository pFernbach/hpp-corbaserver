// Copyright (C) 2009, 2010 by Florent Lamiraux, Thomas Moulard, JRL.
//
// This file is part of the hpp-corbaserver.
//
// This software is provided "as is" without warranty of any kind,
// either expressed or implied, including but not limited to the
// implied warranties of fitness for a particular purpose.
//
// See the COPYING file for more information.

#ifndef HPP_CORBASERVER_PROBLEM_SERVER_IDL
# define HPP_CORBASERVER_PROBLEM_SERVER_IDL
# include <hpp/corbaserver/common.idl>

module hpp
{
  module corbaserver {
  typedef sequence<double> dofSeq;
  /// \brief To define and solve a path planning problem.
  interface Problem
  {
    /// \name Initial and goal configurations
    /// \{

    /// Set initial configuration of specified problem.
    ///	\param dofArray Array of degrees of freedom
    ///	\throw Error.
    void setInitialConfig (in floatSeq dofArray) raises (Error);

    /// Get initial configuration of specified problem.
    ///	\return Array of degrees of freedom
     floatSeq getInitialConfig () raises (Error);

    /// \brief Add goal configuration to specified problem.
    ///	\param dofArray Array of degrees of freedom
    ///	\throw Error.
    void addGoalConfig (in floatSeq dofArray) raises (Error);

    /// Get goal configurations of specified problem.
    ///	\return Array of degrees of freedom
    floatSeqSeq getGoalConfigs () raises (Error);

    /// Reset goal configurations
    void resetGoalConfigs () raises (Error);

    /// \}

    /// \name Constraints
    /// \{

    /// Apply constaints to a configuration
    ///
    /// constraints are stored in ProblemSolver object
    /// \param input input configuration,
    /// \retval output output configuration,
    /// \retval error norm of the residual error.
    boolean applyConstraints (in floatSeq input, out floatSeq output,
			      out double residualError)
      raises (Error);

    /// Generate random configuration and apply constaints to a configuration
    ///
    /// constraints are stored in ProblemSolver object
    /// The class hpp::core::BasicConfigurationShooter is used for random
    /// generation of configuration.
    /// \param maxIter maximum number of tries,
    /// \retval output output configuration,
    /// \retval error norm of the residual error.
    boolean generateValidConfig (in unsigned short maxIter, out floatSeq output,
			      out double residualError)
      raises (Error);

    /// Create orientation constraint between two joints
    ///
    /// \param constraintName name of the constraint created,
    /// \param joint1Name name of first joint
    /// \param joint2Name name of second joint
    /// \param p quaternion representing the desired orientation
    ///        of joint2 in the frame of joint1.
    /// \param mask Select which axis to be constrained.
    /// If joint1 of joint2 is "", the corresponding joint is replaced by
    /// the global frame.
    /// constraints are stored in ProblemSolver object
    void createOrientationConstraint
    (in string constraintName, in string joint1Name,
     in string joint2Name, in Quaternion_ p,
     in boolSeq mask) raises (Error);

    /// Create ComBeetweenFeet constraint between two joints
    ///
    /// \param constraintName name of the constraint created,
    /// \param comName name of a partial com computation object
    ///        in problem solver map. Set "" for a full COM computation.
    /// \param jointLName name of first joint
    /// \param jointRName name of second joint
    /// \param pointL point in local frame of jointL.
    /// \param pointR point in local frame of jointR.
    /// \param jointRefName name of second joint
    /// \param mask Select axis to be constrained.
    /// If jointRef is "", the global frame is used.
    /// Constraints are stored in ProblemSolver object
    void createComBeetweenFeet (in string constraintName, in string comName,
            in string jointLName, in string jointRName, in floatSeq pointL,
            in floatSeq pointR, in string jointRefName, in boolSeq mask)
        raises (Error);

    /// Create RelativeCom constraint between two joints
    ///
    /// \param constraintName name of the constraint created,
    /// \param comName name of CenterOfMassComputation
    /// \param jointName name of joint
    /// \param point point in local frame of joint.
    /// \param mask Select axis to be constrained.
    /// If jointName is "", the robot root joint is used.
    /// Constraints are stored in ProblemSolver object
    void createRelativeComConstraint (in string constraintName, in string comName,
        in string jointLName, in floatSeq point, in boolSeq mask)
      raises (Error);

    void createStaticStabilityGravityConstraint
    (in string constraintName, in string jointName,
     in floatSeqSeq pts, in intSeqSeq objectTriangles,
     in intSeqSeq floorTriangles) raises (Error);

    /// Create position constraint between two joints
    ///
    /// \param constraintName name of the constraint created,
    /// \param joint1Name name of first joint
    /// \param joint2Name name of second joint
    /// \param point1 point in local frame of joint1,
    /// \param point2 point in local frame of joint2.
    /// \param mask Select which axis to be constrained.
    /// If joint1 of joint2 is "", the corresponding joint is replaced by
    /// the global frame.
    /// constraints are stored in ProblemSolver object
    void createPositionConstraint (in string constraintName,
				   in string joint1Name,
				   in string joint2Name,
				   in floatSeq point1,
				   in floatSeq point2,
				   in boolSeq mask)
      raises (Error);


    /// Reset constraints
    void resetConstraints () raises (Error);

    /// Add vector of passive dofs into the ProblemSolver local map
    /// \param constraintName Name of the vector of passive dofs,
    /// \param jointNames a sequence of joint names.
    void addPassiveDofs (in string constraintName, in Names_t jointNames)
      raises (Error);

    /// (Dis-)Allow to modify right hand side of a numerical constraint
    /// \param constraintName Name of the numerical constraint,
    /// \param constant whether right hand side is constant
    ///
    /// Constraints should have been added in the ProblemSolver local map,
    /// but not inserted in the config projector.
    void setConstantRightHandSide (in string constraintName,
				   in boolean constant)
      raises (Error);

    /// Get whether right hand side of a numerical constraint is constant
    /// \param constraintName Name of the numerical constraint,
    /// \return whether right hand side is constant
    boolean getConstantRightHandSide (in string constraintName)
      raises (Error);

    /// Set numerical constraints by names in ConfigProjector
    /// \param constraintName Name of the set of numerical constraint,
    /// \param constraintNames names of the constraints to apply,
    ///
    /// Constraints should have been added in the ProblemSolver local map.
    void setNumericalConstraints (in string constraintName,
				  in Names_t constraintNames)
      raises (Error);

    /// Lock joint with given joint configuration
    /// \param jointName name of the joint
    /// \param value value of the joint configuration
    void lockJoint (in string jointName, in floatSeq value)
      raises (Error);

    /// Set error threshold in numerical constraint resolution
    void setErrorThreshold (in double threshold) raises (Error);

    /// Set maximal number of iterations in numerical constraint resolution
    void setMaxIterations (in unsigned short iterations) raises (Error);

    /// \}

    /// \name Solve problem and get paths
    /// \{

    /// Select path planner type
    /// \param Name of the path planner type, either "DiffusingPlanner",
    ///        "VisibilityPrmPlanner", or any type added by method
    ///        core::ProblemSolver::addPathPlannerType
    void selectPathPlanner (in string pathPlannerType) raises (Error);

    /// Add a path optimizer
    /// \param Name of the path optimizer type, either "RandomShortcut" or
    /// any type added by core::ProblemSolver::addPathOptimizerType
    void addPathOptimizer (in string pathOptimizerType) raises (Error);

    /// Clear the vector of path optimizers
    void clearPathOptimizers () raises (Error);

    /// Select path validation method
    /// \param Name of the path validation method, either "Discretized"
    /// "Progressive", "Dichotomy", or any type added by
    /// core::ProblemSolver::addPathValidationType,
    /// \param tolerance maximal acceptable penetration.
    void selectPathValidation (in string pathValidationType,
			       in double tolerance) raises (Error);

    /// Select path projector method
    /// \param Name of the path projector method, either "None"
    /// "Progressive", "Dichotomy", or any type added by
    /// core::ProblemSolver::addPathProjectorType,
    /// \param tolerance
    void selectPathProjector (in string pathProjectorType,
                              in double tolerance) raises (Error);

    /// Prepare the solver for a step by step planning.
    /// and try to make direct connections (call PathPlanner::tryDirectPath)
    /// \return True if a direct connection has been found.
    boolean prepareSolveStepByStep () raises (Error);

    /// Execute one step of the planner.
    /// \return True if a path has been found.
    /// \note This won't check if a solution has been found before doing one step.
    /// The decision to stop planning is let to the user.
    boolean executeOneStep () raises (Error);

    /// Finish the step-by-step planning.
    /// The path optimizer is not called
    void finishSolveStepByStep () raises (Error);

    /// Solve the problem.
    /// \throw Error.
    double solve() raises (Error);

    /// Make direct connection between two configurations
    /// \param startConfig, endConfig: the configurations to link.
    /// \throw Error if steering method fails to create a direct path of if
    /// direct path is not valid
    void directPath (in floatSeq startConfig, in floatSeq endConfig)
      raises (Error);

    /// Get Number of paths
    short numberPaths () raises (Error);

    /// Optimize a given path
    /// \param inPathId Id of the path in this problem.
    /// \throw Error.
    void optimizePath(in unsigned short inPathId) raises (Error);

    /// Get length of path
    /// \param inPathId rank of the path in the problem
    /// \return length of path if path exists.
    double pathLength(in unsigned short inPathId) raises (Error);

    /// Get the robot config at param on the a path
    /// \param inPathId rank of the path in the problem
    /// \param atDistance : the user parameter choice
    /// \return dofseq : the config at param
    floatSeq configAtParam(in unsigned short inPathId, in double atDistance)
      raises (Error);

    /// Get way points of a path
    /// \param pathId rank of the path in the problem
    floatSeqSeq getWaypoints (in unsigned short pathId) raises (Error);

    /// \}

    /// \name Interruption of a path planning request
    /// \{

    /// \brief Interrupt path planning activity
    /// \note this request is effective only when multi-thread policy is used
    ///       by CORBA server.
    /// See constructor of class Server for details.
    void interruptPathPlanning() raises (Error);
    ///\}

    /// \name exploring the roadmap
    /// \{

    /// Nodes of the roadmap
    floatSeqSeq nodes () raises (Error);

		// number of nodes in the roadmap
    long numberNodes() raises (Error);

    // return the configuration of the node nodeId
    floatSeq node(in unsigned long nodeId) raises(Error);

    /// Number of edges
    long numberEdges () raises (Error);

    /// Edge at given rank
    void edge (in unsigned long edgeId, out floatSeq q1, out floatSeq q2)
      raises (Error);

    /// Number of connected components
    long numberConnectedComponents ();

    /// Nodes of a connected component
    /// \param connectedComponentId index of connected component in roadmap
    /// \return list of nodes of the connected component.
    floatSeqSeq nodesConnectedComponent (in unsigned long connectedComponentId)
      raises (Error);

    /// Clear the roadmap
    void clearRoadmap () raises (Error);

    /// Reset the roadmap
    /// This should be done when joints bounds are modified because the KDTree
    /// must be resized.
    void resetRoadmap () raises (Error);
    /// \}
  };
  }; // interface Problem
}; // module hpp
#endif
